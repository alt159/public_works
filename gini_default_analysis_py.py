{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNJzuzjo4bGvuPPmAL45JI0",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/alt159/public_works/blob/main/gini_default_analysis_py.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mUy0ukzjWhMP"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import roc_curve, auc, confusion_matrix\n",
        "import seaborn as sns\n",
        "import streamlit as st\n",
        "\n",
        "# Definir funciones necesarias\n",
        "def gini(y_true, y_probs):\n",
        "    fpr, tpr, _ = roc_curve(y_true, y_probs)\n",
        "    roc_auc = auc(fpr, tpr)\n",
        "    return 2 * roc_auc - 1\n",
        "\n",
        "def plot_gini_curve(df):\n",
        "    # Ordenar por probabilidades de default en orden descendente\n",
        "    df = df.sort_values(by='default_prob', ascending=False).reset_index(drop=True)\n",
        "\n",
        "    # Calcular la curva de Lorenz para el Gini\n",
        "    total_defaults = df['default'].sum()\n",
        "    df['cum_defaults'] = df['default'].cumsum() / total_defaults\n",
        "    df['cum_population'] = (np.arange(len(df)) + 1) / len(df)\n",
        "\n",
        "    plt.figure()\n",
        "    plt.plot(df['cum_population'], df['cum_defaults'], label=f'Curva de Gini (Índice de Gini = {gini(df[\"default\"], df[\"default_prob\"]):.2f})')\n",
        "    plt.plot([0, 1], [0, 1], 'k--')\n",
        "    plt.xlim([0.0, 1.0])\n",
        "    plt.ylim([0.0, 1.0])\n",
        "    plt.xlabel('Fracción acumulada de la población')\n",
        "    plt.ylabel('Fracción acumulada de defaults')\n",
        "    plt.title('Curva de Gini')\n",
        "    plt.legend(loc=\"lower right\")\n",
        "    st.pyplot(plt)\n",
        "\n",
        "# Simular datos de DTI\n",
        "np.random.seed(42)\n",
        "n_samples = 10000\n",
        "\n",
        "# Función para actualizar el gráfico, la matriz de confusión, y el Gini basado en los parámetros\n",
        "def update_plot(k_dti, c_dti, dti_max):\n",
        "    # Regenerar los valores de DTI con el rango máximo ajustable\n",
        "    debt_mean = 1.0\n",
        "    debt_std = 0.5\n",
        "    dti = np.clip(np.random.normal(debt_mean, debt_std, n_samples), 0, dti_max)\n",
        "\n",
        "    # Calcular las probabilidades de default usando la función logística\n",
        "    default_probs = 1 / (1 + np.exp(-(k_dti * (dti - c_dti))))\n",
        "\n",
        "    # Generar los defaults utilizando la función binomial\n",
        "    defaults = np.random.binomial(1, default_probs)\n",
        "\n",
        "    df = pd.DataFrame({\n",
        "        'dti': dti,\n",
        "        'default_prob': default_probs,\n",
        "        'default': defaults\n",
        "    })\n",
        "\n",
        "    gini_value = gini(df['default'], df['default_prob'])\n",
        "\n",
        "    # Umbral de decisión para predicciones\n",
        "    threshold = 0.5\n",
        "    predicted_defaults = (df['default_prob'] >= threshold).astype(int)\n",
        "\n",
        "    # Matriz de confusión\n",
        "    cm = confusion_matrix(df['default'], predicted_defaults)\n",
        "    tn, fp, fn, tp = cm.ravel()\n",
        "\n",
        "    # Mostrar matriz de confusión como tabla\n",
        "    st.write(\"Matriz de Confusión:\")\n",
        "    cm_df = pd.DataFrame({\n",
        "        'Predicho No Default': [tn, fn],\n",
        "        'Predicho Default': [fp, tp]\n",
        "    }, index=['Real No Default', 'Real Default'])\n",
        "\n",
        "    st.table(cm_df)\n",
        "\n",
        "    # Mostrar estadísticas descriptivas\n",
        "    num_defaults = df['default'].sum()\n",
        "    num_non_defaults = len(df) - num_defaults\n",
        "    st.write(f\"Número de Defaults 'Reales': {num_defaults}\")\n",
        "    st.write(f\"Número de No Defaults 'Reales': {num_non_defaults}\")\n",
        "\n",
        "    # Graficar curva de densidad de DTI para No Default y Default\n",
        "    plt.figure(figsize=(12, 6))\n",
        "    sns.kdeplot(df[df['default'] == 0]['dti'], label='Sin Default', color='blue', fill=True, alpha=0.5)\n",
        "    sns.kdeplot(df[df['default'] == 1]['dti'], label='Con Default', color='red', fill=True, alpha=0.5)\n",
        "\n",
        "    plt.xlabel('Ratio Deuda/Ingreso (DTI)')\n",
        "    plt.ylabel('Densidad')\n",
        "    plt.legend(loc='upper right')\n",
        "    plt.title(f'Curva de Densidad de DTI para Default y Sin Default\\nGini: {gini_value:.4f}')\n",
        "    st.pyplot(plt)\n",
        "\n",
        "    # Graficar curva Gini\n",
        "    plot_gini_curve(df)\n",
        "\n",
        "# Crear sliders interactivos\n",
        "k_dti = st.sidebar.slider('Pendiente (k_DTI)', 0.01, 20.0, 1.0, 0.1)\n",
        "c_dti = st.sidebar.slider('Desplazamiento (c_DTI)', 0.0, 5.0, 1.5, 0.1)\n",
        "dti_max = st.sidebar.slider('Máximo DTI', 1.0, 10.0, 3.0, 0.1)\n",
        "\n",
        "# Actualizar gráficos basados en los valores de los sliders\n",
        "update_plot(k_dti, c_dti, dti_max)\n"
      ]
    }
  ]
}